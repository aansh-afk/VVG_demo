rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check admin role in two ways:
    // 1. Through custom claims (most secure, requires setup-admin-portal.js)
    // 2. Through user document role field (fallback)
    function isAdmin() {
      return hasAdminClaim() || hasAdminRole();
    }
    
    function hasAdminClaim() {
      return request.auth.token.admin == true;
    }
    
    function hasAdminRole() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSecurity() {
      return hasSecurityClaim() || hasSecurityRole() || isSecurityStaff();
    }
    
    function hasSecurityClaim() {
      return request.auth.token.security == true;
    }
    
    function hasSecurityRole() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'security';
    }
    
    function isSecurityStaff() {
      return exists(/databases/$(database)/documents/securityStaff/$(request.auth.uid));
    }
    
    // Users collection rules
    match /users/{userId} {
      // Regular users can only read their own document
      // Admin can read all user documents
      // Security staff can read user data for verification purposes
      allow read: if isAdmin() || isOwner(userId) || isSecurity();
      
      // Only the user can create their own document
      allow create: if isOwner(userId);
      
      // Users can update their own data, admins can update any user
      // Except role field which only admins can modify
      // Also allow updates to the 'groups' field by the system for pre-approval to work
      allow update: if isAdmin() || 
        (isOwner(userId) && 
         !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']))) ||
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['groups'])) ||
        // Any authenticated user can update groups field on any user document for pre-approval system
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['groups']) &&
         request.method == 'update');
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Events collection rules
    match /events/{eventId} {
      // Anyone authenticated can read events
      // Security staff needs read access to check attendees
      allow read: if isAuthenticated();
      
      // Only admins can create, delete events
      allow create, delete: if isAdmin();
      
      // Admins can update any field
      // Security staff can update 'attendees' for attendance tracking
      // Regular users can only update 'attendees' array IF:
      // 1. The event doesn't require approval, OR
      // 2. They are directly pre-approved, OR
      // 3. One of their groups is pre-approved
      allow update: if isAdmin() || 
        (isSecurity() && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendees'])) ||
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendees']) &&
         (
           // Case 1: Event doesn't require approval
           !resource.data.requiresApproval ||
           
           // Case 2: User is directly pre-approved
           (resource.data.preApprovedUsers != null && 
            resource.data.preApprovedUsers.hasAny([request.auth.uid])) ||
           
           // Case 3: User's groups intersect with event's pre-approved groups
           (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
            resource.data.preApprovedGroups != null &&
            resource.data.preApprovedGroups.size() > 0 &&
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groups != null &&
            resource.data.preApprovedGroups.hasAny(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groups))
         ));
    }
    
    // Groups collection rules
    match /groups/{groupId} {
      // Anyone can read groups
      allow read: if isAuthenticated();
      
      // Only admins can create, update, delete groups
      // However, for the update operation, we need to check if the affected keys are only 'members'
      // which is needed for the pre-approval system to work
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || 
                   (isAuthenticated() && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']));
    }
    
    // Approval requests collection rules
    match /approvalRequests/{requestId} {
      // Users can read their own requests, admins can read all
      allow read: if isAdmin() || 
        (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // Users can create requests for themselves
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Only admins can update request status
      allow update: if isAdmin() || 
        (isAuthenticated() && 
         resource.data.userId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) == false);
      
      // Users can delete their own pending requests, admins can delete any
      allow delete: if isAdmin() || 
        (isAuthenticated() && 
         resource.data.userId == request.auth.uid && 
         resource.data.status == 'pending');
    }
    
    // Security staff collection rules
    match /securityStaff/{staffId} {
      // Security staff can read their own document, admins can read all
      allow read: if isAdmin() || 
        (isSecurity() && isOwner(staffId));
      
      // Only admins can create, update, delete security staff
      allow create, update, delete: if isAdmin();
    }
    
    // Event Attendance tracking for security staff
    match /eventAttendance/{eventId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isSecurity();
      
      match /attendees/{attendeeId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin() || isSecurity();
      }
    }
    
    // Security can record attendance check-ins
    match /eventCheckIns/{eventId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isSecurity();
      
      match /records/{recordId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin() || isSecurity();
      }
    }
    
    // Admin Config collection - ONLY admins can access
    match /adminConfig/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin Analytics collection - ONLY admins can access
    match /adminAnalytics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Event Statistics collection - admins can read/write, others can only read
    match /eventStatistics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isSecurity();
    }
  }
}