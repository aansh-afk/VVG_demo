rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Security staff roles - simplified for Storage rules
    function isSecurity() {
      return request.auth != null && 
        (request.auth.token.security == true || 
         request.auth.token.role == 'security');
    }
    
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    match /profile-photos/{userId} {
      // Allow users to read their own photos, anyone can read photos
      // Security staff can also read profile photos for verification
      allow read: if request.auth != null;
      // Only allow users to write their own photos
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow security staff to read all photos for verification
    match /profile-photos/{allPhotos=**} {
      allow read: if isSecurity();
    }
    
    // Allow security staff to read and write event-related photos
    match /event-photos/{eventId}/{photoId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isAdmin() || isSecurity());
    }
    
    // Allow security staff to upload attendance verification photos
    match /attendance-verification/{eventId}/{userId} {
      allow read: if request.auth != null;
      allow write: if isSecurity();
    }
    
    // ID verification photos
    match /id-verification/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isSecurity());
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}